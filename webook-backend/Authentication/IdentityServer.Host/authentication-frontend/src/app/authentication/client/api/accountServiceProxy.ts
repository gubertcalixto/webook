/**
 * IdentityServer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import { HttpClient, HttpEvent, HttpHeaders, HttpParameterCodec, HttpParams, HttpResponse } from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs';

import { Configuration } from '../configuration';
import { CustomHttpParameterCodec } from '../encoder';
import { IdentityLoginInput } from '../model/identityLoginInput';
import { IdentityLoginOutput } from '../model/identityLoginOutput';
import { IdentityLogoutInput } from '../model/identityLogoutInput';
import { BASE_PATH } from '../variables';




@Injectable()
export class AccountServiceProxy {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * @param returnUrl 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountLoginGet(returnUrl?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public accountLoginGet(returnUrl?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public accountLoginGet(returnUrl?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public accountLoginGet(returnUrl?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (returnUrl !== undefined && returnUrl !== null) {
            queryParameters = queryParameters.set('returnUrl', <any>returnUrl);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<any>(`${this.configuration.basePath}/Account/Login`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param identityLoginInput 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountLoginPost(identityLoginInput?: IdentityLoginInput, observe?: 'body', reportProgress?: boolean): Observable<IdentityLoginOutput>;
    public accountLoginPost(identityLoginInput?: IdentityLoginInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IdentityLoginOutput>>;
    public accountLoginPost(identityLoginInput?: IdentityLoginInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IdentityLoginOutput>>;
    public accountLoginPost(identityLoginInput?: IdentityLoginInput, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<IdentityLoginOutput>(`${this.configuration.basePath}/Account/Login`,
            identityLoginInput,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param logoutId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountLogoutGet(logoutId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public accountLogoutGet(logoutId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public accountLogoutGet(logoutId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public accountLogoutGet(logoutId?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (logoutId !== undefined && logoutId !== null) {
            queryParameters = queryParameters.set('logoutId', <any>logoutId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<any>(`${this.configuration.basePath}/Account/Logout`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param identityLogoutInput 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountLogoutPost(identityLogoutInput?: IdentityLogoutInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public accountLogoutPost(identityLogoutInput?: IdentityLogoutInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public accountLogoutPost(identityLogoutInput?: IdentityLogoutInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public accountLogoutPost(identityLogoutInput?: IdentityLogoutInput, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/Account/Logout`,
            identityLogoutInput,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
