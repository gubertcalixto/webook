// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scrapbook.Infrastructure;

namespace Scrapbook.Infrastructure.Migrations
{
    [DbContext(typeof(DefaultContext))]
    [Migration("20200819015018_Added_PageData_To_DocumentPage_Entity")]
    partial class Added_PageData_To_DocumentPage_Entity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Scrapbook.Domain.Entities.ContactForm.ContactForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ContactForms");
                });

            modelBuilder.Entity("Scrapbook.Domain.Entities.Editor.Document.EditorDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DocumentAccess")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Scrapbook.Domain.Entities.Editor.Document.EditorDocumentPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EditorDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("PageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("PageNumber")
                        .HasColumnType("int");

                    b.Property<string>("PreviewImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EditorDocumentId");

                    b.ToTable("DocumentPages");
                });

            modelBuilder.Entity("Scrapbook.Domain.Entities.Editor.EditorArea.EditorArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EditorAreas");
                });

            modelBuilder.Entity("Scrapbook.Domain.Entities.Editor.EditorArea.EditorAreaUserTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("CoordinateX")
                        .HasColumnType("float");

                    b.Property<double?>("CoordinateY")
                        .HasColumnType("float");

                    b.Property<Guid>("EditorAreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FixedPosition")
                        .HasColumnType("int");

                    b.Property<bool>("HasFixedPosition")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EditorAreaId");

                    b.ToTable("EditorAreaUserTemplates");
                });

            modelBuilder.Entity("Scrapbook.Domain.Entities.Editor.Plugin.Component.EditorComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EditorPluginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PluginId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EditorPluginId");

                    b.ToTable("EditorComponents");
                });

            modelBuilder.Entity("Scrapbook.Domain.Entities.Editor.Plugin.Component.EditorComponentInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("CoordinateX")
                        .HasColumnType("float");

                    b.Property<double?>("CoordinateY")
                        .HasColumnType("float");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("DocumentPageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EditorComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EditorDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<double?>("Width")
                        .HasColumnType("float");

                    b.Property<int?>("ZIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentPageId");

                    b.HasIndex("EditorComponentId");

                    b.ToTable("EditorComponentInstances");
                });

            modelBuilder.Entity("Scrapbook.Domain.Entities.Editor.Plugin.EditorPlugin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DownloadNumber")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("EditorPlugins");
                });

            modelBuilder.Entity("Scrapbook.Domain.Entities.Interactions.EditorComponentFavorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EditorComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("EditorComponentFavorites");
                });

            modelBuilder.Entity("Scrapbook.Domain.Entities.Interactions.EditorDocumentAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("EditorDocumentAccesses");
                });

            modelBuilder.Entity("Scrapbook.Domain.Entities.Interactions.EditorInteraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InteractionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InteractionTypeEnum")
                        .HasColumnType("int");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ObjectTypeEnum")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("EditorInteractions");
                });

            modelBuilder.Entity("Scrapbook.Domain.Entities.Interactions.UserFollow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowedPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserFollows");
                });

            modelBuilder.Entity("Scrapbook.Domain.Entities.User.UserPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoplayAudios")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoplayVideos")
                        .HasColumnType("bit");

                    b.Property<bool>("InvisibleMode")
                        .HasColumnType("bit");

                    b.Property<bool>("NewsletterActivated")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("Scrapbook.Domain.Entities.Editor.Document.EditorDocumentPage", b =>
                {
                    b.HasOne("Scrapbook.Domain.Entities.Editor.Document.EditorDocument", "EditorDocument")
                        .WithMany()
                        .HasForeignKey("EditorDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Scrapbook.Domain.Entities.Editor.EditorArea.EditorAreaUserTemplate", b =>
                {
                    b.HasOne("Scrapbook.Domain.Entities.Editor.EditorArea.EditorArea", "EditorArea")
                        .WithMany()
                        .HasForeignKey("EditorAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Scrapbook.Domain.Entities.Editor.Plugin.Component.EditorComponent", b =>
                {
                    b.HasOne("Scrapbook.Domain.Entities.Editor.Plugin.EditorPlugin", "EditorPlugin")
                        .WithMany()
                        .HasForeignKey("EditorPluginId");
                });

            modelBuilder.Entity("Scrapbook.Domain.Entities.Editor.Plugin.Component.EditorComponentInstance", b =>
                {
                    b.HasOne("Scrapbook.Domain.Entities.Editor.Document.EditorDocumentPage", "DocumentPage")
                        .WithMany()
                        .HasForeignKey("DocumentPageId");

                    b.HasOne("Scrapbook.Domain.Entities.Editor.Plugin.Component.EditorComponent", "EditorComponent")
                        .WithMany()
                        .HasForeignKey("EditorComponentId");
                });
#pragma warning restore 612, 618
        }
    }
}
